Task 1 :
First thought the task was to save the new 7 files only, so this is what I did for that :
Using ls and saving the new 7 files output in a txt file :
ls -t ./home/user/data | head -7 > exp.txt
Passing the exp.txt file to grep to list out the contents rather than file name of found content (redundancy) and passing that output to tar file using command line arguments (xargs) : (I do not know why, but i couldn't use grep -hZ to output the files as seperated by null character rather than newline or else i would have used "xargs -0 -I{} ..")
grep -h '*" exp.txt | xargs -I{} tar -czvf ./backup/archive.tar.gz "./home/user/data/{}"
Can remove grep and directly do : 
ls -t ./home/user/data | head -7 | xargs -I{} tar -czvf ./backup/archive.tar.gz "./home/user/data/{}" 
Bash script for this task (this was command executed on terminal) : 
#!/bin/bash


ls -t ./home/user/data | head -7 | xargs -I{} tar -czvf ./backup/archive.tar.gz "./home/user/data/{}"
Now finally realised actual task, so this is what I did for that :
#!/bin/bash

date_var="$(date +"%d %B %Y")"
time_var="$(date +"%r %Z")"
name="Backup on $date_var at $time_var"
read count <<< $(ls ./backup | wc -l)
if [ $count -ge 7 ]; then
        while [ "$count" -ge 7 ]; do
                ls -tr ./backup | head -1 | xargs -I{} rm "./backup/{}"
                read count <<< $(ls ./backup | wc -l)
        done
fi
ls -t ./home/user/data | xargs -I{} tar -czf "./backup/$name.tar.gz" "./home/user/data/{}"

OR

#!/bin/bash

date_var="$(date +"%d %B %Y")"
time_var="$(date +"%r %Z")"
name="Backup on $date_var at $time_var"
read count <<< $(ls ./backup | wc -l)
if [ $count -ge 7 ]; then
        z=$(($count-6))
        ls -tr ./backup | head -$z | xargs -I{} rm "./backup/{}"
fi
ls -t ./home/user/data | xargs -I{} tar -czf "./backup/$name.tar.gz" "./home/user/data/{}"

Task 2 :
#!/bin/bash
ls -l ./home/user/data | cut -c-10 > temp.txt
IFS=''
count=0
while read -r line; do
	if [ "$count" != "0" ]; then
		read permissions <<< $line
		if [ "$permissions:0:1" != "d" ]; then
			checker=1
			for ((i=1; i<${#permissions}; ++i)); do
				if [ "$permissions:i:1" = "-" ]; then
					checker=0
				fi
			done
			if [ "$checker" = "1" ]; then
				ls -1 ./home/user/data > tmp.txt
				counter=0
				while read -r line1; do
					if [ "$counter" = "$((count-1))" ]; then
						echo "\"./home/user/data/$line1\"" >> final_file.txt
					chmod 755 "./home/user/data/$line1"
					fi
					counter=$((counter+1))
				done < tmp.txt	
			fi
		fi
	fi
	count=$(($count+1))
done < temp.txt
rm temp.txt
rm tmp.txt

Task 3 :
#!/bin/bash
echo -n "Enter the target file full name > "
read input
if [ "$input" = "" ]; then
        echo -n "You entered nothing"
fi
ls -1 > temp.txt
check=0
IFS=''
while read -r line; do
        if [ "$input" = "$line" ]; then
                check=1
        fi
done < temp.txt
rm temp.txt
while read -r line; do
        echo "$line
        "
done < "./$input"

Task 4 :
#!/bin/bash
echo -n "Enter the number of rows you want in the pattern > "
read input
for ((j=0; j<input; ++j)); do
        for ((i=0; i<=j; ++i)); do
             echo -n "*"
        done
        echo ""
done

Task 5 :
#!/bin/bash
IFS=''
echo -n "Please enter the input target folder > "
read input_folder
echo -n "Please enter the output folder > "
read output_folder
ls -1 "./$input_folder" > temp.txt
check=0
while read -r -u9 line; do
	if [ "${line: -4}" = ".cpp" ]; then
		length=${#line}
		z=$(($length-4))
		file_name=${line:0:$z}
		ls -1 "./$output_folder" > tmp.txt
		checker=0
		while read -r line1; do
			if [ "$line1" = "$file_name.out" ]; then
				checker=1
			fi
		done < tmp.txt 
		rm tmp.txt
		if [ "$checker" = "1" ]; then
			rm "./$output_folder/$file_name.out"
		fi
		read tmp <<< $(g++ "./$input_folder/$line" -o "./$output_folder/$file_name.out")
		ls -1 "./$output_folder" > tmp.txt
        	checker=0
        	while read -r line1; do
                	if [ "$line1" = "$file_name.out" ]; then
                        	checker=1
                	fi
        	done < tmp.txt
		rm tmp.txt
		if [ "$checker" = "1" ]; then
			correct=1	
			echo -n "Please enter full path of test cases file for input file $line > "
			read input_file_path	
			echo -n "Please enter correct (expected) output given test cases > "
                        read correct_output
			echo "$correct_output"
			out="_output"
			timeout 5 "./$output_folder/$file_name.out" < "$input_file_path" > "./$file_name$out.txt"
			echo "" >> "./$file_name$out.txt"
			read lines <<< $(wc -l < "./$file_name$out.txt")	
			while read -r line1; do
				lines="$(echo -e "${lines}" | tr -d '[:space:]')"		
				if [ "$lines" != "1" ]; then	
					correct=0
				fi
				if [ "$line1" != "$correct_output" ]; then
					correct=0
				fi
			done < "./$file_name$out.txt"
			if [ "$correct" = "1" ]; then
				echo "YES"
			else
				echo "NO"
			fi
		fi
	fi
done 9< temp.txt
rm temp.txt
